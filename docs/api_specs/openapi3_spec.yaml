openapi: "3.0.0"

info:
  title: "nut_webgui JSON API"
  version: "0.5.0"
  description: "Simple JSON API for interfacing with nut_webgui."
  license:
    name: "Apache 2.0"
    url: "https://raw.githubusercontent.com/SuperioOne/nut_webgui/refs/heads/master/LICENSE"
  contact:
    url: "https://github.com/SuperioOne/nut_webgui/issues"
    email: "pm@smdd.dev"

servers:
- url: "{protocol}://{host}:{port}/{base_path}"
  description: "nut_webgui server"
  variables:
    host:
      default: localhost
    base_path:
      default: ""
    port:
      default: '9000'
    protocol:
      default: 'http'
      enum:
        - http
        - https
paths:
  /api/ups:
    description: "Returns collection of all available UPS devices."
    get:
      tags:
        - ups
      operationId: "api_ups_collection_get"
      responses:
        "200":
          description: "Collection of UPS devices."
          content:
            application/json:
              examples:
                ups_list:
                  $ref: "#/components/examples/ups_list_response"
                empty_list:
                  $ref: "#/components/examples/empty_ups_list_response"
              schema:
                $ref: "#/components/schemas/UpsList"
        "500":
          description: "Server or daemon errors."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "503":
          description: "Server is not ready to serve."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"

  /api/ups/{ups_name}:
    patch:
      requestBody:
        description: "Set var request body."
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/SetVarRequest"
      parameters:
        - name: ups_name
          in: path
          description: "UPS name"
          required: true
          allowEmptyValue: false
          schema:
            type: string

      tags:
        - ups
      operationId: "api_ups_patch_rw"
      responses:
        "202":
          description: "Set variable request accepted"
        "400":
          description: "Invalid SetVar request or UPS name."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "401":
          description: "Upsd user and password configs are not set."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "404":
          description: "Ups does not exists."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "500":
          description: "Server or daemon errors."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "503":
          description: "Server is not ready to serve."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"

    get:
      parameters:
        - name: ups_name
          in: path
          description: "UPS name"
          required: true
          allowEmptyValue: false
          schema:
            type: string
      tags:
        - ups
      operationId: "api_ups_get"
      responses:
        "200":
          description: "UPS device response."
          content:
            application/json:
              examples:
                ups:
                  $ref: "#/components/examples/ups_response"
              schema:
                $ref: "#/components/schemas/Ups"
        "400":
          description: "Invalid UPS name"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"

        "404":
          description: "Ups does not exists."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "500":
          description: "Server or daemon errors."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "503":
          description: "Server is not ready to serve."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"

  /api/ups/{ups_name}/instcmd:
    description: "Instantiate UPS INSTCMD command."
    post:
      requestBody:
        description: "Command request body."
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/CommandRequest"
      parameters:
        - name: ups_name
          in: path
          description: "UPS name"
          required: true
          allowEmptyValue: false
          schema:
            type: string
      tags:
        - ups
      operationId: "api_ups_instcmd"
      responses:
        "202":
          description: "Command is accepted."
        "400":
          description: "Invalid command or UPS name"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "401":
          description: "Upsd user and password configs are not set."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "404":
          description: "Ups does not exists."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "500":
          description: "Server or daemon errors."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "503":
          description: "Server is not ready to serve."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"

  /api/ups/{ups_name}/fsd:
    description: "Instantiate forced shutdown on UPS."
    post:
      parameters:
        - name: ups_name
          in: path
          description: "UPS name"
          required: true
          allowEmptyValue: false
          schema:
            type: string
      tags:
        - ups
      operationId: "api_ups_fsd"
      responses:
        "202":
          description: "FSD is accepted."
        "400":
          description: "Invalid UPS name"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "401":
          description: "Upsd user and password configs are not set."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "404":
          description: "Ups does not exists."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "500":
          description: "Server or daemon errors."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "503":
          description: "Server is not ready to serve."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"


  /probes/health:
    description: "Server health check"
    get:
      tags:
        - probes
      operationId: "probes_health"
      responses:
        "200":
          description: "Command is accepted"
          content:
            application/json:
              examples:
                default:
                  $ref: "#/components/examples/health_200"
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: "Upsd daemon failure"
          content:
            application/json:
              examples:
                default:
                  $ref: "#/components/examples/health_500"
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: "Server is not ready to serve"
          content:
            application/json:
              examples:
                default:
                  $ref: "#/components/examples/health_503"
              schema:
                $ref: "#/components/schemas/HealthResponse"
  /probes/readiness:
    description: "Server readiness probe mainly intented for Kubernetes."
    get:
      tags:
        - probes
      operationId: "probes_readiness"
      responses:
        "200":
          description: "Server is ready to response."
          content:
            text/plain:
              schema:
                enum:
                  - "READY"
        "503":
          description: "Server is not ready to response."
          content:
            text/plain:
              schema:
                enum:
                  - "NOT READY"
components:
  schemas:
    Ups:
      type: object
      required:
        - attached
        - commands
        - desc
        - last_modified
        - name
        - rw_variables
        - status
        - variables
      properties:
        name:
          type: string
        desc:
          type: string
        status:
          type: string
        last_modified:
          type: string
          format: date-time
        rw_variables:
          type: object
          additionalProperties:
            oneOf:
            - type: object
              required:
                - type
              properties:
                type:
                  type: string
                  default: string
                  enum:
                    - string
                max_len:
                  type: integer
            - type: object
              required:
                - type
              properties:
                type:
                  type: string
                  default: number
                  enum:
                    - number
            - type: object
              required:
                - type
                - options
              properties:
                type:
                  type: string
                  default: enum
                  enum:
                    - enum
                options:
                  type: array
                  items:
                    type: string
            - type: object
              required:
                - type
                - min
                - max
              properties:
                type:
                  type: string
                  default: range
                  enum:
                    - range
                min:
                  type: number
                max:
                  type: number

        variables:
          type: object
          additionalProperties:
            oneOf:
              - type: "number"
              - type: "string"
        commands:
          type: "array"
          items:
            type: "string"
        attached:
          type: "array"
          items:
            type: "string"

    UpsList:
      type: array
      items:
        "$ref": "#/components/schemas/Ups"
    ProblemDetails:
      type: object
      required:
        - title
        - status
      properties:
        title:
          type: string
        details:
          type: string
        status:
          type: number
          minimum: 100
    CommandRequest:
      type: object
      required:
        - instcmd
      properties:
        instcmd:
         type: string
    SetVarRequest:
      type: object
      required:
        - variable
        - value
      properties:
        variable:
         type: string
        value:
          oneOf:
            - type: "number"
            - type: "string"
    HealthResponse:
      type: object
      required:
        - upsd_status
        - upsd_server
        - upsd_port
      properties:
        last_device_sync:
          type: string
          format: date-time
        upsd_port:
          type: number
          format: hostname
        upsd_server:
          type: string
          format: hostname
        upsd_status:
          type: string
          enum:
            - "Online"
            - "Dead"
            - "NotReady"
  examples:
    health_200:
      summary: "Server Online"
      value: |
        {
          "last_device_sync": "2025-06-23T14:58:35.597830446Z",
          "upsd_port": 3493,
          "upsd_server": "127.0.0.1",
          "upsd_status": "Online"
        }
    health_500:
      summary: "Server Dead"
      value: |
        {
          "last_device_sync": "2025-06-23T14:58:35.597830446Z",
          "upsd_port": 3493,
          "upsd_server": "127.0.0.1",
          "upsd_status": "Dead"
        }
    health_503:
      summary: "Server NotReady"
      value: |
        {
          "last_device_sync": null,
          "upsd_port": 3493,
          "upsd_server": "127.0.0.1",
          "upsd_status": "NotReady"
        }
    ups_response:
      summary: "UPS device"
      value: |
        {
            "attached": [
              "10.20.10.1"
            ],
            "commands": [
              "driver.killpower",
              "driver.reload",
              "driver.reload-or-error",
              "driver.reload-or-exit",
              "load.off"
            ],
            "desc": "dummy-ups apc_c1500",
            "last_modified": "2025-06-23T14:40:19.598889563Z",
            "name": "apc_c1500",
            "rw_variables": {
              "device.model": {
                "type": "string",
                "max_len": 32
              },
              "battery.runtime.low": {
                "type": "number"
              },
              "ups.beeper.status": {
                "type": "enum",
                "options": [
                  "enabled",
                  "disabled"
                ]
              },
              "battery.charge": {
                "type": "range",
                "min": 0,
                "max": 100
              }
            },
            "status": "OL",
            "variables": {
              "battery.charge.warning": 50,
              "device.type": "ups",
              "ups.productid": "0003",
              "battery.voltage.nominal": 24.0,
              "ups.mfr": "American Power Conversion",
              "device.mfr": "American Power Conversion",
              "driver.parameter.synchronous": "auto",
              "ups.firmware": "UPS 10.0 / ID = 1005",
              "driver.version": "2.8.1",
              "device.model": "Smart-UPS C 1500",
              "driver.version.internal": 0.18,
              "ups.beeper.status": "disabled",
              "ups.status": "OL",
              "battery.charge.low": 10,
              "ups.timer.shutdown": -1,
              "driver.debug": 0,
              "driver.flag.allow_killpower": 0,
              "driver.name": "dummy-ups",
              "ups.delay.shutdown": 20,
              "battery.charge": 100,
              "driver.parameter.pollinterval": 2,
              "battery.type": "PbAc",
              "driver.parameter.port": "apc_c1500.dev",
              "ups.serial": "s00000000000",
              "battery.voltage": 27.3,
              "ups.mfr.date": "2016/08/17",
              "ups.timer.reboot": -1,
              "ups.vendorid": "051d",
              "ups.model": "Smart-UPS C 1500",
              "driver.parameter.mode": "dummy-once",
              "battery.runtime.low": 120,
              "driver.state": "quiet",
              "device.serial": "s00000000000",
              "battery.runtime": 17820
            }
          }
    empty_ups_list_response:
      summary: "Empty UPS list"
      value: "[]"
    ups_list_response:
      summary: "Populated UPS list"
      value: |
        [
          {
            "attached": [
              "10.20.10.1"
            ],
            "commands": [
              "driver.killpower",
              "driver.reload",
              "driver.reload-or-error",
              "driver.reload-or-exit",
              "load.off"
            ],
            "desc": "dummy-ups apc_c1500",
            "last_modified": "2025-06-23T14:40:19.598889563Z",
            "name": "apc_c1500",
            "rw_variables": {
              "device.model": {
                "type": "string",
                "max_len": 32
              },
              "battery.runtime.low": {
                "type": "number"
              },
              "ups.beeper.status": {
                "type": "enum",
                "options": [
                  "enabled",
                  "disabled"
                ]
              },
              "battery.charge": {
                "type": "range",
                "min": 0,
                "max": 100
              }
            },
            "status": "OL",
            "variables": {
              "battery.charge.warning": 50,
              "device.type": "ups",
              "ups.productid": "0003",
              "battery.voltage.nominal": 24.0,
              "ups.mfr": "American Power Conversion",
              "device.mfr": "American Power Conversion",
              "driver.parameter.synchronous": "auto",
              "ups.firmware": "UPS 10.0 / ID = 1005",
              "driver.version": "2.8.1",
              "device.model": "Smart-UPS C 1500",
              "driver.version.internal": 0.18,
              "ups.beeper.status": "disabled",
              "ups.status": "OL",
              "battery.charge.low": 10,
              "ups.timer.shutdown": -1,
              "driver.debug": 0,
              "driver.flag.allow_killpower": 0,
              "driver.name": "dummy-ups",
              "ups.delay.shutdown": 20,
              "battery.charge": 100,
              "driver.parameter.pollinterval": 2,
              "battery.type": "PbAc",
              "driver.parameter.port": "apc_c1500.dev",
              "ups.serial": "s00000000000",
              "battery.voltage": 27.3,
              "ups.mfr.date": "2016/08/17",
              "ups.timer.reboot": -1,
              "ups.vendorid": "051d",
              "ups.model": "Smart-UPS C 1500",
              "driver.parameter.mode": "dummy-once",
              "battery.runtime.low": 120,
              "driver.state": "quiet",
              "device.serial": "s00000000000",
              "battery.runtime": 17820
            }
          }
        ]

tags:
  - name: ups
    description: "UPS endpoints"
  - name: probes
    description: "Server health check endpoints"
